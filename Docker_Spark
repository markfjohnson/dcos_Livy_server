#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Create snapshot builds with:
# docker build -t spark:git-`git rev-parse --short HEAD` .

# Basing from Mesos image so the Mesos native library is present.
FROM ubuntu:14.04
MAINTAINER Michael Gummelt <mgummelt@mesosphere.io>, Arthur Rand <arand@mesosphere.io>

# Set environment variables.
ENV DEBIAN_FRONTEND "noninteractive"
ENV DEBCONF_NONINTERACTIVE_SEEN "true"

# Upgrade package index and install basic commands.
RUN apt-get update && \
    apt-get install -y \
            software-properties-common \
            runit \
            nginx \
            krb5-user \
            curl \
            unzip \
            r-base

# packages
RUN apt-get update && apt-get install -yq --no-install-recommends --force-yes \
    wget \
    git \
    libjansi-java \
    libsvn1 \
    libcurl3 \
    libevent-dev \
    maven \
    python-pip \
    python-setuptools \
    build-essential \
    libapr1 \
    libsasl2-modules && \ 
    mkdir -p /apps/$LIVY_BUILD_VERSION/logs

# python2.7 \

RUN pip install --upgrade setuptools


RUN mkdir -p /opt/mesosphere/ && \
    cd /opt/mesosphere && \
    curl -L -O https://downloads.mesosphere.io/libmesos-bundle/libmesos-bundle-1.10-1.4-63e0814.tar.gz && \
    tar zxf libmesos-bundle-1.10-1.4-63e0814.tar.gz && \
    rm libmesos-bundle-1.10-1.4-63e0814.tar.gz && \
    curl -L -O https://downloads.mesosphere.com/dcos-commons/artifacts/0.30.0/bootstrap.zip && \
    unzip bootstrap.zip && \
    rm bootstrap.zip

RUN mkdir -p /usr/lib/jvm/ && \
    cd /usr/lib/jvm && \
    curl -L -O https://downloads.mesosphere.com/java/jre-8u112-linux-x64-jce-unlimited.tar.gz && \
    tar zxf jre-8u112-linux-x64-jce-unlimited.tar.gz && \
    rm jre-8u112-linux-x64-jce-unlimited.tar.gz

ENV BOOTSTRAP /opt/mesosphere/bootstrap
ENV JAVA_HOME /usr/lib/jvm/jre1.8.0_112
ENV MESOS_NATIVE_JAVA_LIBRARY /opt/mesosphere/libmesos-bundle/lib/libmesos.so
ENV LD_LIBRARY_PATH /opt/mesosphere/libmesos-bundle/lib/
ENV HADOOP_CONF_DIR /etc/hadoop

RUN mkdir /etc/hadoop

ADD runit/service /var/lib/runit/service
ADD runit/init.sh /sbin/init.sh
ADD nginx /etc/nginx

# The following symlinks are hacks to make spark-class work under the
# restricted PATH (/usr/bin) set by the DCOS
# --executor-environment-variables option
RUN ln -s /bin/bash /usr/bin/bash
RUN ln -s /bin/ls /usr/bin/ls
RUN ln -s /bin/grep /usr/bin/grep

RUN ln -s /var/lib/runit/service/spark /etc/service/spark
RUN ln -s /var/lib/runit/service/nginx /etc/service/nginx

ADD dist /opt/spark/dist

# required to run as nobody
RUN chmod -R ugo+rw /etc/nginx
RUN chmod -R ugo+rw /etc/krb5.conf
RUN chmod -R ugo+rw /etc/hadoop
RUN chmod -R ugo+rw /etc/service
RUN chmod -R ugo+rw /var/lib/
RUN chmod -R ugo+rw /var/run/
RUN chmod -R ugo+rw /var/log/
RUN chmod -R ugo+rw /opt/spark/dist

### Livy stuff
# Overall ENV vars
ENV SPARK_VERSION 2.1.1
ENV LIVY_BUILD_VERSION livy-server-0.4.0-SNAPSHOT

# Add R list
RUN echo 'deb http://cran.rstudio.com/bin/linux/ubuntu trusty/' | sudo tee -a /etc/apt/sources.list.d/r.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9

# Setup Oracle Java 8
RUN add-apt-repository ppa:webupd8team/java
RUN apt-get update
RUN echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
RUN echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections
RUN apt-get install -yq oracle-java8-installer
RUN apt-get install -yq oracle-java8-set-default
ENV JAVA_HOME /usr/lib/jvm/java-8-oracle
ENV JRE_HOME /usr/lib/jvm/java-8-oracle/jre


# Set install path for Livy
ENV LIVY_APP_PATH /apps/$LIVY_BUILD_VERSION

# Set build path for Livy
ENV LIVY_BUILD_PATH /apps/build/livy



# Set Spark home directory
ENV SPARK_HOME /opt/spark/dist

# Clone Livy repository
RUN mkdir -p /apps/build && \
    cd /apps/build && \
	git clone https://github.com/cloudera/livy.git && \
	cd $LIVY_BUILD_PATH && \
    mvn -DskipTests -Dspark.version=$SPARK_VERSION clean package && \
    unzip $LIVY_BUILD_PATH/assembly/target/$LIVY_BUILD_VERSION.zip -d /apps && \
    rm -rf $LIVY_BUILD_PATH && \
    mkdir -p $LIVY_APP_PATH/upload && mkdir -p $LIVY_APP_PATH/logs && \
    echo "livy.spark.master=mesos://leader.mesos:5050" >> $LIVY_APP_PATH/conf/livy.conf && \
    echo "livy.spark.deployMode = cluster" >> $LIVY_APP_PATH/conf/livy.conf
    mkdir 

# Add custom files, set permissions
ADD entrypoint.sh .

RUN chmod +x entrypoint.sh

# Expose port
EXPOSE 8998
#RUN ls -lt
#ENTRYPOINT ["/opt/spark/dist/entrypoint.sh"]
  
## End Livy

WORKDIR /opt/spark/dist